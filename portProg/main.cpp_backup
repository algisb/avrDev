#include <stdio.h>   /* Standard input/output definitions */
#include <string.h>  /* String function definitions */
#include <unistd.h>  /* UNIX standard function definitions */
#include <fcntl.h>   /* File control definitions */
#include <errno.h>   /* Error number definitions */
#include <termios.h> /* POSIX terminal control definitions */

/*
 * 'open_port()' - Open serial port 1.
 *
 * Returns the file descriptor on success or -1 on error.
 */

int open_port(char * _devName)
{
	int fd; /* File descriptor for the port */

	fd = open(_devName, O_RDWR | O_NOCTTY | O_NDELAY);
	if (fd == -1)
	{
		/*
		* Could not open the port.
		*/
		perror("open_port: Unable to open /dev/ttyf1 - ");
	}
	else
		fcntl(fd, F_SETFL, 0);

	return (fd);
}

int main()
{
	char *portname = "/dev/ttyACM0";


	int fd = open (portname, O_RDWR | O_NOCTTY | O_SYNC);
	if (fd < 0)
	{
		printf("error %d opening %s: %s\n", errno, portname, strerror (errno));
		return -1;
	}
	//set_interface_attribs (fd, B9600, 0);  // set speed to 9600 bps, 8n1 (no parity)
	//set_blocking (fd, 0);                // set no blocking


	usleep(2000000);
	write (fd, "hello!1\n", 8);           // send 7 character greeting

	usleep ((8) * 100);             // sleep enough to transmit the 7 plus
					     // receive 25:  approx 100 uS per char transmit
	char buf [100];
	int n = read (fd, buf, sizeof(buf));  // read up to 100 characters if ready to read
		
	printf("the string: %d \n", buf);
	return 0;
}
